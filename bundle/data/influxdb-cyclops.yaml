heat_template_version: 2013-05-23

description: |
  Deploys the InfluxDB and Cyclops services instances resources.
parameters:
  image_influxdb:
    type: string
    description: InfluxDB image name to use
    default: influxdb-0.9.6
    constraints:
    - allowed_values:
      - influxdb-0.9.6
      description: must be a valid influxdb image name

  image_rcb:
    type: string
    description: RCB image name to use
    default: cyclops
    constraints:
    - allowed_values:
      - cyclops
      description: must be a valid cyclops image name

  flavor:
    description: Server flavor id to use
    type: string
    default: m1.medium
    constraints:
    - allowed_values:
      - m1.tiny
      - m1.small
      - m1.medium
      description: must be a valid OpenStack flavor.

  influxdb_floating_ip_old:
    description: Ip address of the old VM to migrate
    type: string
    default: ''

  sshkey:
    description: The ssh key name to use with all SM VMs
    type: string
    default: mcn-key
    label: SSH Key
  
  public_net:
    type: string
    description: >
      ID of public network net04_ext
    default: 77e659dd-f1b4-430c-ac6f-d92ec0137c85

  private_mgmt_net:
    type: string
    description: >
      ID of private network mgmt
    default: 82c56778-da2c-4e12-834d-8d09958d0563

resources:
  influxdb_security_group:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "INFLUXDB public ports"
      SecurityGroupIngress:
      - {"CidrIp": 0.0.0.0/0, "FromPort": "22", "ToPort": "22", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8080", "ToPort": "8080", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "80", "ToPort": "80", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "3000", "ToPort": "3000", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8086", "ToPort": "8086", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8083", "ToPort": "8083", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "4567", "ToPort": "4567", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "5671", "ToPort": "5671", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "5672", "ToPort": "5672", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "6379", "ToPort": "6379", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "15672", "ToPort": "15672", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8088", "ToPort": "8088", "IpProtocol": "tcp"}

  rcb_si_security_group:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "RCB SI public ports"
      SecurityGroupIngress:
      - {"CidrIp": 0.0.0.0/0, "FromPort": "22", "ToPort": "22", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8080", "ToPort": "8080", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "80", "ToPort": "80", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "3000", "ToPort": "3000", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8086", "ToPort": "8086", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8083", "ToPort": "8083", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "4567", "ToPort": "4567", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "5671", "ToPort": "5671", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "5672", "ToPort": "5672", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "6379", "ToPort": "6379", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "15672", "ToPort": "15672", "IpProtocol": "tcp"}

  influxdb_port_mgmt:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_mgmt_net }
      security_groups: [{ get_resource: influxdb_security_group }]

  rcb_port_mgmt:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_mgmt_net }
      security_groups: [{ get_resource: rcb_si_security_group }]

  influxdb_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: influxdb_port_mgmt }

  rcb_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: rcb_port_mgmt }

  influxdb:
    type: OS::Nova::Server
    properties:
      name: influxdb
      image: { get_param: image_influxdb }
      flavor: { get_param: flavor }
      key_name: { get_param: sshkey }
      networks:
        - port : { get_resource: influxdb_port_mgmt }
      user_data:
          str_replace:
            template: |
              #!/bin/bash
              Tstart=$(date +%s%3N)
              echo "influxdb" > /etc/hostname
              source /home/ubuntu/bart_auth
              Tend=$(date +%s%3N)
              Ttotal=$(((Tend-Tstart)/1000))
              echo "Time total: " $Ttotal >> /home/ubuntu/times_influxdb
              #zabbix agent
              sudo apt-get install -y zabbix-agent
              sudo sed -i -e 's/ServerActive=127.0.0.1/ServerActive=160.85.4.28:10051/g' -e 's/Server=127.0.0.1/Server=160.85.4.28/g' -e 's/Hostname=Zabbix server/#Hostname=/g' /etc/zabbix/zabbix_agentd.conf
              sudo service zabbix-agent restart
            params:
              stack_id: { get_param: "OS::stack_id"}
              influxdb_ip_new: { get_attr: [influxdb_floating_ip, floating_ip_address] }
              ip_old: { get_param: influxdb_floating_ip_old }

  rcb_si:
    type: OS::Nova::Server
    properties:
      name: rcb_si
      image: { get_param: image_rcb }
      flavor: { get_param: flavor }
      key_name: { get_param: sshkey }
      networks:
        - port : { get_resource: rcb_port_mgmt }
      user_data: 
          str_replace:
            template: |
              #!/bin/bash
              Tstart=$(date +%s%3N)
              cd /home/ubuntu/cyclops_configuration
              bash cyclops_config.sh influxdb_ip
              Tconfig_end=$(date +%s%3N)
              cd /home/ubuntu/cyclops-udr/install
              bash deploy_udr.sh
              Tudr_build=$(date +%s%3N)
              cd /home/ubuntu/cyclops-rc/install
              bash deploy_rc.sh
              Trc_build=$(date +%s%3N)
              cd /home/ubuntu/cyclops-billing/install
              bash deploy_billing.sh
              Tbilling_build=$(date +%s%3N)
              echo "rcbaas" > /etc/hostname
              #zabbix agent
              sudo apt-get install -y zabbix-agent
              sudo sed -i -e 's/ServerActive=127.0.0.1/ServerActive=160.85.4.28:10051/g' -e 's/Server=127.0.0.1/Server=160.85.4.28/g' -e 's/Hostname=Zabbix server/#Hostname=/g' /etc/zabbix/zabbix_agentd.conf
              sudo service zabbix-agent restart
              service tomcat7 restart
              rabbitmq-plugins enable rabbitmq_management
              service rabbitmq-server restart
              Tend=$(date +%s%3N)
              Tconfig=$(((Tconfig_end-Tstart)/1000))
              Tudr=$(((Tudr_build-Tconfig_end)/1000))
              Trc=$(((Trc_build-Tudr_build)/1000))
              Tbilling=$(((Tbilling_build-Trc_build)/1000))
              Ttotal=$(((Tend-Tstart)/1000))
              echo "Cyclops-InfluxDb configuration: " $Tconfig >> /home/ubuntu/times_rcb
              echo "UDR build: " $Tudr >> /home/ubuntu/times_rcb
              echo "RC build: " $Trc >> /home/ubuntu/times_rcb
              echo "Billing build: " $Tbilling >> /home/ubuntu/times_rcb
              echo "Total time: " $Ttotal >> /home/ubuntu/times_rcb
            params:
              influxdb_ip: { get_attr: [influxdb_floating_ip, floating_ip_address] }
 
outputs:
  mcn.endpoint.influxdb.dashboard:
    description: "Dashboard of the InfluxDB service instance"
    value:
      str_replace:
        template: http://host:8083
        params:
          host: { get_attr: [influxdb_floating_ip, floating_ip_address] }
  mcn.endpoint.influxdb.rest:
    description: "REST endpoint of the InfluxDB microservice."
    value:
      str_replace:
        template: http://host:8086
        params:
          host: { get_attr: [influxdb_floating_ip, floating_ip_address] }
  mcn.endpoint.influxdb.internal:
    description: "Internal communications between InfluxDB node instances."
    value:
      str_replace:
        template: http://host:8088
        params:
          host: { get_attr: [influxdb_floating_ip, floating_ip_address] }

  mcn.endpoint.rcb.dashboard:
    description: "Dashboard of the RCB service instance"
    value:
      str_replace:
        template: http://host:8080/dashboard/app
        params:
          host: { get_attr: [rcb_floating_ip, floating_ip_address] }
  mcn.endpoint.rcb.udr:
    description: "REST endpoint of the UDR microservice."
    value:
      str_replace:
        template: http://host:8080/udr/ext/app
        params:
          host: { get_attr: [rcb_floating_ip, floating_ip_address] }
  mcn.endpoint.rcb.mq:
    description: "IP address to the RCB messaging bus."
    value:
      str_replace:
#        template: http://host
        template: host
        params:
          host: { get_attr: [rcb_floating_ip, floating_ip_address] }
  mcn.endpoint.rcb.mq.mgt:
    description: "IP address to the RCB messaging bus management interface."
    value:
      str_replace:
        template: http://host:15672
        params:
          host: { get_attr: [rcb_floating_ip, floating_ip_address] }
